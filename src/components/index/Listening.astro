<div
    class="js-only flex h-5 items-center text-sm text-stone-500 dark:text-stone-400"
>
    <span class="mr-2 min-w-fit">listening to</span>
    <div id="skeleton" class="flex animate-pulse items-center">
        <div class="h-5 w-32 rounded-sm bg-stone-300 dark:bg-stone-700">
            <div class="h-5 w-5 rounded-sm bg-stone-400 dark:bg-stone-600">
            </div>
        </div>
    </div>
    <div id="listening" class="hidden items-center gap-2 overflow-hidden">
        <a
            id="spotify-link"
            class="flex flex-grow items-center overflow-hidden rounded-sm bg-stone-200 text-stone-500 hover:bg-stone-300 dark:bg-stone-800 dark:text-stone-400 dark:hover:bg-stone-700"
            href="#"
        >
            <img
                id="album-art"
                src=""
                class="h-5 w-5 flex-shrink-0 rounded-sm"
            />
            <span class="mx-1 flex flex-col overflow-hidden">
                <span
                    id="song-name"
                    class="max-w-full truncate overflow-hidden whitespace-nowrap"
                ></span>
            </span>
        </a>
    </div>
    <div id="not-listening" class="hidden text-stone-500 dark:text-stone-400">
        nothing atm
    </div>
</div>
<script>
    const DISCORD_ID = '351059285754642463';
    let heartbeatInterval: ReturnType<typeof setInterval>;

    const skeleton: HTMLElement = document.getElementById(
        'skeleton'
    ) as HTMLElement;
    const notListening: HTMLElement = document.getElementById(
        'not-listening'
    ) as HTMLElement;
    const listening: HTMLElement = document.getElementById(
        'listening'
    ) as HTMLElement;
    const spotifyLink: HTMLAnchorElement = document.getElementById(
        'spotify-link'
    ) as HTMLAnchorElement;
    const albumArt: HTMLImageElement = document.getElementById(
        'album-art'
    ) as HTMLImageElement;
    const songName: HTMLElement = document.getElementById(
        'song-name'
    ) as HTMLElement;

    function updateUI(spotify: any): void {
        skeleton.classList.add('hidden');

        if (!spotify) {
            listening.classList.add('hidden');
            notListening.classList.remove('hidden');
            return;
        }

        notListening.classList.add('hidden');
        listening.classList.remove('hidden');
        listening.classList.add('flex');

        spotifyLink.href = `https://open.spotify.com/track/${spotify.track_id}`;
        albumArt.src = `https://wsrv.nl/?url=${spotify.album_art_url}&w=80&h=80`;
        albumArt.alt = `Album art for ${spotify.song} by ${spotify.artist}`;
        songName.textContent = spotify.song;
    }

    fetch(`https://api.lanyard.rest/v1/users/${DISCORD_ID}`)
        .then((res: Response) => res.json())
        .then((json: any) => updateUI(json.data.spotify));

    const socket: WebSocket = new WebSocket('wss://api.lanyard.rest/socket');

    socket.addEventListener('open', (): void => {
        socket.send(
            JSON.stringify({
                op: 2,
                d: { subscribe_to_id: DISCORD_ID },
            })
        );
    });

    socket.addEventListener('message', (event: MessageEvent): void => {
        const data: any = JSON.parse(event.data);

        if (data.op === 1) {
            const interval: number = data.d.heartbeat_interval;
            heartbeatInterval = setInterval((): void => {
                socket.send(JSON.stringify({ op: 3 }));
            }, interval);
        }

        if (data.t === 'PRESENCE_UPDATE' || data.t === 'INIT_STATE')
            updateUI(data.d.spotify);
    });

    socket.addEventListener('close', (): void => {
        clearInterval(heartbeatInterval);
    });
</script>
